// Prisma schema file for What2Eat

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum PhysicalActivityLevel {
  SEDENTARY // Little to no exercise
  LIGHT // Light exercise (1-3 days per week)
  MODERATE // Moderate exercise (3-5 days per week)
  ACTIVE // Intense exercise (6-7 days per week)
  VERY_ACTIVE // Athletes or physically demanding jobs
}

enum AuthType {
  EMAIL
  GOOGLE
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum UserRole {
  USER
  ADMIN
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum FoodCategory {
  FRUITS
  VEGETABLES
  GRAINS
  PROTEINS
  DAIRY
  LEGUMES
  NUTS_SEEDS
  FATS_OILS
  SWEETS_DESSERTS
  BEVERAGES
  HERBS_SPICES
}

enum DietaryPreference {
  VEGAN
  VEGETARIAN
  GLUTEN_FREE
  KETO
  PALEO
  HALAL
  KOSHER
  NONE // Default for users without dietary restrictions
}

enum Goals {
  lose_weight
  gain_muscle
  maintain_health
  increase_energy
  improve_digestion
  balanced_diet
}

enum BodyType {
  ECTOMORPH // BMI < 18.5
  SLENDER // BMI 18.5 - 22.9
  ATHLETIC // BMI 23 - 26.9
  THICK_SET // BMI 27 - 29.9
  STOCKY // BMI 30 - 34.9
  HEAVYSET // BMI 35 - 39.9
  OBESE // BMI >= 40
}

model User {
  id                String                 @id @default(uuid())
  name              String
  image             String
  email             String                 @unique
  birthDate         DateTime?
  gender            UserGender?
  dietaryPreference DietaryPreference?
  country           String?
  state             String?
  metricUnit        String?
  height            String?
  weight            String?
  goal              Goals?
  physicalActivity  PhysicalActivityLevel?
  status            UserStatus?            @default(ACTIVE)
  role              UserRole               @default(USER)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  Afflictions       AfflictionUser[]
  IncludedFoods     IncludedFoodUser[]
  ExcludedFoods     ExcludedFoodUser[]
  SavedMenus        SavedMenu[]
  HealthIndicators  HealthIndicatorUser[]
  Activities        ActivityUser[]
  Auth              Auth?
}

model Auth {
  id           String    @id @default(uuid())
  userId       String    @unique
  authType     AuthType
  passwordHash String? // Only for email authentication
  googleId     String? // Only for Google authentication
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  Sessions     Session[]
}

model Session {
  id           String   @id @default(uuid())
  authId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auth         Auth     @relation(fields: [authId], references: [id])
}

model Affliction {
  id    String           @id @default(uuid())
  name  String           @unique
  Users AfflictionUser[]
}

model AfflictionUser {
  id           String     @id @default(uuid())
  userId       String
  afflictionId String
  user         User       @relation(fields: [userId], references: [id])
  affliction   Affliction @relation(fields: [afflictionId], references: [id])
}

model Food {
  id            String             @id @default(uuid())
  name          String             @unique
  category      FoodCategory?
  IncludedUsers IncludedFoodUser[]
  ExcludedUsers ExcludedFoodUser[]
}

model IncludedFoodUser {
  id     String @id @default(uuid())
  userId String
  foodId String
  user   User   @relation(fields: [userId], references: [id])
  food   Food   @relation(fields: [foodId], references: [id])
}

model ExcludedFoodUser {
  id     String @id @default(uuid())
  userId String
  foodId String
  user   User   @relation(fields: [userId], references: [id])
  food   Food   @relation(fields: [foodId], references: [id])
}

model SavedMenu {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  breakfast Json?
  snack1    Json?
  lunch     Json?
  snack2    Json?
  dinner    Json?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthIndicatorUser {
  id              String    @id @default(uuid())
  userId          String
  weight          Float?
  height          Float?
  bmi             Float?
  bodyType        BodyType?
  bodyFat         Float?
  bodyWater       Float?
  bodyProtein     Float?
  basalMetabolism Float?
  visceralFat     Float?
  boneMass        Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Activity {
  id            String  @id @default(uuid())
  name          String  @unique
  includesSteps Boolean

  ActivityUser ActivityUser[]
}

model ActivityUser {
  id             String   @id @default(uuid())
  userId         String
  activityId     String
  steps          Int?
  caloriesBurned Float?
  distanceMeters Float?
  activeMinutes  Int?
  activeHours    Int?
  startDateTime  DateTime
  createdAt      DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])
}
